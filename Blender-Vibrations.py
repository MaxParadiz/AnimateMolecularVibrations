# This script should be run from within Blender!
# CAUTION: All of the elements in the scene will be deleted
# To animate the first normal mode, run the function Vibrate([0])

import bpy
import numpy as np
import pickle


# Select all objects
bpy.ops.object.select_all(action='SELECT')

# Delete the selected objects
bpy.ops.object.delete() 



# Load the pickle dump file generated by the previous script
filename = "/path/to/pickle/dump"
Data = pickle.load(open(filename,"rb"))


# Parse the values from the data
frequencies = Data["Frequencies"]
FreqMatrix = Data["Modes"]
atoms = list(map(int,Data["Atoms"]))
coords = Data["Coords"]

# Define the color and the relative scales of the different atom types
atom_properties = {1:{'scale':0.5,'name':'H','Color':(0.85,0.85,0.85,1)}
         ,5:{'scale':0.8,'name':'B','Color':(234.0/255,178.0/255,58.0/255,1)}
         ,6:{'scale':0.71,'name':'C','Color':(0.20,0.20,0.20,1)}
         ,7:{'scale':0.65,'name':'N','Color':(82.0/255,140.0/255,230.0/255,1)}
         ,8:{'scale':0.63,'name':'O','Color':(245.0/255,62.0/255,79.0/255,1)}
         ,9:{'scale':0.61,'name':'F','Color':(60.0/255,224.0/255,120.0/255,1)}}

# Create the material for each atom
for atom_type in atom_properties:
 New_material = bpy.data.materials.new(atom_properties[atom_type]['name'])
 New_material.use_nodes = True
 New_material.node_tree.nodes["Principled BSDF"].inputs[0].default_value = atom_properties[atom_type]['Color']

#Create a colored sphere for each atom

for i in range(0,len(atoms)):
 size = size=atom_properties[atoms[i]]['scale']*3
 bpy.ops.mesh.primitive_uv_sphere_add(segments=256, ring_count=128, location=(coords[i]),scale=(size,size,size))
 bpy.context.scene.objects[i].data.materials.append(bpy.data.materials[atom_properties[atoms[i]]['name']])


# Select the scene, and set the number of total frames for the animation
scene = bpy.context.scene
scene.frame_start = 1
scene.frame_end = 200

# Define the "Vibrate" function
def Vibrate(modes,speed=1,amp = [],phase=[] ):
 phase = np.concatenate([phase,np.zeros(len(modes)-len(phase))])
 amp = np.concatenate([amp,np.ones(len(modes)-len(amp))])
 for t in range(0,200):
  scene.frame_set(t)
  displace = 0
  p = 0
  for m in range(len(modes)):
   displace += amp[m]*np.sin(2*speed*frequencies[modes[m]]/300*np.pi*t/200+phase[p])*FreqMatrix[modes[m]]
   p += 1
  tcoords = displace+coords
  for i in range(0,len(coords)):
   obj = scene.objects[i]
   obj.location=tcoords[i]
   obj.keyframe_insert(data_path='location')


# Define the function to render the first n frames
def Render(renderpath,nframes): 
 for i in range(nframes):
  scene.frame_set(i)
  bpy.data.scenes['Scene'].render.filepath = renderpath+'%s.png' % (i)
  bpy.ops.render.render(write_still=True)




